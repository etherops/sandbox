AWSTemplateFormatVersion: "2010-09-09"
Description: "A example data pipeline in the way of Firehose -> S3 -> Lambda template -> Firehose -> S3"

Parameters:
  LambdaErrorEmail:
    Type: String
    Description: Enter a valid email address for receiving lambda error alarm emails
  PipelineSuccessEmail:
    Type: String
    Description: Enter a valid email address for alerts regaring pipeline successes

Mappings:
  TemplateVariables:
    IncomingBucketName:
      Value: "datapipeline-incoming-raw"
    ProcessedBucketName:
      Value: "datapipeline-processed-json"

Resources:
  # Ingestion Firehose IAMs
  IngestionFirehoseRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          -
            Effect: Allow
            Principal:
              Service: firehose.amazonaws.com
            Action: sts:AssumeRole
            Condition:
              StringEquals:
                sts:ExternalId: !Ref "AWS::AccountId"

  IngestionFirehosePolicy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: DatapipelineIngestionFirehosePolicy
      Roles:
        - !Ref IngestionFirehoseRole
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Action:
              - s3:AbortMultipartUpload
              - s3:GetBucketLocation
              - s3:GetObject
              - s3:ListBucket
              - s3:ListBucketMultipartUploads
              - s3:PutObject
            Resource:
              - !GetAtt IncomingRawS3Bucket.Arn
              - !Join ['/', [!GetAtt IncomingRawS3Bucket.Arn, '*']]
          - Effect: Allow
            Action:
              - logs:CreateLogGroup
              - logs:CreateLogStream
              - logs:PutLogEvents
              - logs:DescribeLogStreams
            Resource:
              - arn:aws:logs:*:*:*

  IngestionFirehoseStream:
    Type: AWS::KinesisFirehose::DeliveryStream
    Properties:
      S3DestinationConfiguration:
        BucketARN: !GetAtt IncomingRawS3Bucket.Arn
        BufferingHints:
          IntervalInSeconds: 60
          SizeInMBs: 1
        Prefix: "datapipeline-fh-incoming-raw"
        CloudWatchLoggingOptions:
          Enabled: true
          LogGroupName: "datapipeline-processed-json"
          LogStreamName: "datapipeline-processed-json"
        CompressionFormat: "UNCOMPRESSED"
        RoleARN: !GetAtt IngestionFirehoseRole.Arn

  IncomingRawS3Bucket:
    Type: AWS::S3::Bucket
    Properties:
      AccessControl: Private
      BucketName: !FindInMap [TemplateVariables, IncomingBucketName, Value]
      NotificationConfiguration:
        LambdaConfigurations:
          -
            Event: s3:ObjectCreated:*
            Function: !GetAtt LambdaProcessingFunction.Arn

  LambdaProcessingBucketPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref LambdaProcessingFunction
      Principal: s3.amazonaws.com
      SourceAccount: !Ref "AWS::AccountId"
      SourceArn: !Join [ ":", [ "arn:aws:s3::", !FindInMap [TemplateVariables, IncomingBucketName, Value] ] ]

  LambdaRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          -
            Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole

  LambdaPolicy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: LambdaPolicy
      Roles:
        - !Ref LambdaRole
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Action:
              - firehose:DescribeDeliveryStream
              - firehose:ListDeliveryStreams
            Resource:
              - !Join [ "/", [ !Join [ ":", [ "arn:aws:firehose", !Ref "AWS::Region", !Ref "AWS::AccountId", "deliverystream" ] ] , !Ref IngestionFirehoseStream ] ]
          - Effect: Allow
            Action:
              - firehose:DescribeDeliveryStream
              - firehose:ListDeliveryStreams
              - firehose:PutRecord
              - firehose:PutRecordBatch
            Resource:
              - !Join [ "/", [ !Join [ ":", [ "arn:aws:firehose", !Ref "AWS::Region", !Ref "AWS::AccountId", "deliverystream" ] ] , !Ref ProcessedFirehoseStream ] ]
          - Effect: Allow
            Action:
              - s3:GetBucketLocation
              - s3:GetObject
              - s3:ListBucket
            Resource:
              - !Join [ ":", [ "arn:aws:s3::", !FindInMap [TemplateVariables, IncomingBucketName, Value] ] ]
              - !Join ['/', [!Join [ ":", [ "arn:aws:s3::", !FindInMap [TemplateVariables, IncomingBucketName, Value] ] ], '*']]
          - Effect: Allow
            Action:
              - logs:CreateLogGroup
              - logs:CreateLogStream
              - logs:PutLogEvents
              - logs:DescribeLogStreams
            Resource:
              - arn:aws:logs:*:*:*

  LambdaProcessingFunction:
    Type: AWS::Lambda::Function
    Properties:
      Handler: index.handler
      Role: !GetAtt LambdaRole.Arn
      Code:
        ZipFile: !Sub
          - |
            var aws = require('aws-sdk');
            var s3 = new aws.S3({apiVersion: '2006-03-01'});
            var firehose = new aws.Firehose({apiVersion: '2015-08-04'});
            exports.handler = function(event, context) {
              console.log('Received event:', JSON.stringify(event, null, 2));
              var s3Params = {
                Bucket: event.Records[0].s3.bucket.name
                , Key: event.Records[0].s3.object.key
              };

              const readline = require('readline');
              const rl = readline.createInterface({
                input: s3.getObject(s3Params).createReadStream()
              });

              //we assume that firehose records written to s3 are
              // line delimited
              rl.on('line', function(line) {
                var firehoseData;
                try {
                    JSON.parse(line);
                    firehoseData = line;
                } catch(e) {
                    console.log("JSON.parse exception for line: " + line, e)
                    firehoseData = JSON.stringify({"raw_message" : line});
                }
                var firehoseParams = {
                  DeliveryStreamName: "${streamName}",
                  Record: {
                    //add a newline so that s3 consumers can easily iterate records
                    Data: firehoseData + "\n"
                  }
                };
                console.log("attempting firehose put for params:", firehoseParams)
                firehose.putRecord(firehoseParams, function(err, data) {
                  if (err) {
                    console.log("firehose.putRecord error" + err, err.stack); // an error occurred
                  } else {
                    console.log("Record written to firehose",JSON.stringify(firehoseParams.Record, null, 2));           // successful response
                  }
                });
              }).on('done', function() {
                  context.done();
              });
            };
          - { streamName : !Ref ProcessedFirehoseStream }
      Runtime: "nodejs4.3"
      Timeout: "25"
      #TracingConfig:
        #Mode: "Active"

  EmailSystemTrolls:
    Type: AWS::SNS::Topic
    Properties:
      DisplayName: Tell the people on pager duty to wake up
      Subscription:
        - Protocol: email
          Endpoint: !Ref LambdaErrorEmail

  LambdaErrorAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmActions:
      - !Ref EmailSystemTrolls
      Namespace: AWS/Lambda
      Dimensions:
      - Name: FunctionName
        Value: !Ref LambdaProcessingFunction
      MetricName: Errors
      EvaluationPeriods: '1'
      Statistic: Sum
      Period: '60'
      ComparisonOperator: GreaterThanThreshold
      Threshold: '0'

  ProcessedFirehoseRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          -
            Effect: Allow
            Principal:
              Service: firehose.amazonaws.com
            Action: sts:AssumeRole
            Condition:
              StringEquals:
                sts:ExternalId: !Ref "AWS::AccountId"

  ProcessedFirehosePolicy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: DatapipelineProcessedFirehosePolicy
      Roles:
        - !Ref ProcessedFirehoseRole
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Action:
              - s3:AbortMultipartUpload
              - s3:GetBucketLocation
              - s3:GetObject
              - s3:ListBucket
              - s3:ListBucketMultipartUploads
              - s3:PutObject
            Resource:
              - !Join [ ":", [ "arn:aws:s3::", !FindInMap [TemplateVariables, ProcessedBucketName, Value] ] ]
              - !Join ['/', [  !Join [ ":", [ "arn:aws:s3::", !FindInMap [TemplateVariables, ProcessedBucketName, Value] ] ], '*']]
          - Effect: Allow
            Action:
              - logs:CreateLogGroup
              - logs:CreateLogStream
              - logs:PutLogEvents
              - logs:DescribeLogStreams
            Resource:
              - arn:aws:logs:*:*:*

  ProcessedFirehoseStream:
    Type: AWS::KinesisFirehose::DeliveryStream
    Properties:
      S3DestinationConfiguration:
        BucketARN: !GetAtt ProcessedS3Bucket.Arn
        BufferingHints:
          IntervalInSeconds: 60
          SizeInMBs: 1
        Prefix: "datapipeline-processed-json"
        CloudWatchLoggingOptions:
          Enabled: true
          LogGroupName: "datapipeline-processed-json"
          LogStreamName: "datapipeline-processed-json"
        CompressionFormat: UNCOMPRESSED
        RoleARN: !GetAtt ProcessedFirehoseRole.Arn

  EverybodyCelebrateTopic:
    Type: AWS::SNS::Topic
    Properties:
      DisplayName: Tell the everybody to celebrate!
      Subscription:
        - Protocol: email
          Endpoint: !Ref PipelineSuccessEmail

  EverybodyCelebrateTopicPolicy:
    Type: AWS::SNS::TopicPolicy
    Properties:
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service: s3.amazonaws.com
          Action: sns:Publish
          Resource: "*"
          Condition:
            ArnLike:
              aws:SourceArn: !Join [ ":", [ "arn:aws:s3::", !FindInMap [TemplateVariables, ProcessedBucketName, Value] ] ]
      Topics:
      - Ref: EverybodyCelebrateTopic

  ProcessedS3Bucket:
    DependsOn: EverybodyCelebrateTopicPolicy
    Type: AWS::S3::Bucket
    Properties:
      AccessControl: "Private"
      BucketName: !FindInMap [TemplateVariables, ProcessedBucketName, Value]
      NotificationConfiguration:
        TopicConfigurations:
          -
            Event: s3:ObjectCreated:*
            Topic: !Ref EverybodyCelebrateTopic